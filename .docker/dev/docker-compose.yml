version: "${DOCKER_COMPOSE_VERSION}"

services:
  setup:
    container_name: ${ELK_SETUP_NAME}
    build:
      context: ${ELK_SETUP_CONTEXT}
      args:
        ELASTIC_VERSION: ${ELK_ELASTICSEARCH_VERSION}
    init: true
    volumes:
      - ${ELK_SETUP_ENTRYPOINT}:/entrypoint.sh:ro,Z
      - ${ELK_SETUP_HELPERS}:/helpers.sh:ro,Z
      - ${ELK_SETUP_ROLES}:/roles:ro,Z
      - setup:/state:Z
    environment:
      ELASTIC_PASSWORD: ${ELK_ELASTICSEARCH_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${ELK_LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${ELK_KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${ELK_METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${ELK_FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${ELK_HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${ELK_MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${ELK_BEATS_SYSTEM_PASSWORD:-}
    networks:
      - bridge
    depends_on:
      - elasticsearch

  elasticsearch:
    container_name: ${ELK_ELASTICSEARCH_NAME}
    build:
      context: ${ELK_ELASTICSEARCH_CONTEXT}
      args:
        ELASTIC_VERSION: ${ELK_ELASTICSEARCH_VERSION}
    volumes:
      - ${ELK_ELASTICSEARCH_CONFIG}:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
    ports:
      - ${ELK_ELASTICSEARCH_HTTP_PORT}:9200
      - ${ELK_ELASTICSEARCH_TCP_PORT}:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_PASSWORD: ${ELK_ELASTICSEARCH_PASSWORD:-}
      discovery.type: single-node
    networks:
      - bridge

  logstash:
    container_name: ${ELK_LOGSTASH_NAME}
    build:
      context: ${ELK_LOGSTASH_CONTEXT}
      args:
        ELASTIC_VERSION: ${ELK_ELASTICSEARCH_VERSION}
    volumes:
      - ${ELK_LOGSTASH_CONFIG}:/usr/share/logstash/config/logstash.yml:ro,Z
      - ${ELK_LOGSTASH_PIPELINE}:/usr/share/logstash/pipeline:ro,Z
    ports:
      - ${ELK_LOGSTASH_BEATS_PORT}:5044
      - ${ELK_LOGSTASH_TCP_PORT}:50000/tcp
      - ${ELK_LOGSTASH_UDP_PORT}:50000/udp
      - ${ELK_LOGSTASH_DEFAULT_PORT}:9600
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${ELK_LOGSTASH_INTERNAL_PASSWORD:-}
    networks:
      - bridge
    depends_on:
      - elasticsearch

  kibana:
    container_name: ${ELK_KIBANA_NAME}
    build:
      context: ${ELK_KIBANA_CONTEXT}
      args:
        ELASTIC_VERSION: ${ELK_ELASTICSEARCH_VERSION}
    volumes:
      - ${ELK_KIBANA_CONFIG}:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - ${ELK_KIBANA_PORT}:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: ${ELK_KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - bridge
    depends_on:
      - elasticsearch

  postgres-main:
    container_name: ${POSTGRES_MAIN_NAME}
    build:
      dockerfile: ${POSTGRES_MAIN_DOCKERFILE}
    ports:
      - ${POSTGRES_MAIN_PORT}:5432
    volumes:
      - postgres-main:/var/lib/postgres/data
    environment:
      POSTGRES_USER: ${POSTGRES_MAIN_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_MAIN_PASSWORD}
      POSTGRES_REPLICA_PASSWORD: ${POSTGRES_REPLICA_PASSWORD}
    command: postgres -c log_destination=stderr -c log_statement=all -c max_connections=250
    networks:
      - bridge

  postgres-replica:
    container_name: ${POSTGRES_REPLICA_NAME}
    build:
      dockerfile: ${POSTGRES_REPLICA_DOCKERFILE}
    ports:
      - ${POSTGRES_REPLICA_PORT}:5432
    volumes:
      - postgres-replica:/var/lib/postgres/data
    environment:
      POSTGRES_USER: ${POSTGRES_REPLICA_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_REPLICA_PASSWORD}
    command: postgres -c log_destination=stderr -c log_statement=all -c max_connections=250
    networks:
      - bridge
    depends_on:
      - postgres-main

  redis:
    container_name: ${REDIS_NAME}
    image: redis:latest
    ports:
      - ${REDIS_PORT}:6379
    command: redis-server --bind ${REDIS_BIND} --maxmemory ${REDIS_MAX_MEMORY} --requirepass ${REDIS_PASSWORD}
    volumes:
      - minio:/data
    networks:
      - bridge

  minio:
    container_name: ${MINIO_NAME}
    image: minio/minio
    ports:
      - ${MINIO_API_PORT}:9000
      - ${MINIO_UI_PORT}:9090
    environment:
      MINIO_ROOT_USER: ${MINIO_USERNAME:-}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-}
    command: server /data --console-address :9090
    networks:
      - bridge

  minio-mc:
    container_name: ${MINIO_MC_NAME}
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add local http://minio:9000 ${MINIO_USERNAME} ${MINIO_PASSWORD};
      /usr/bin/mc mb local/${MINIO_BUCKET_NAME};
      exit 0;
      "
    networks:
      - bridge

networks:
  bridge:
    name: ${NETWORK_NAME}
    driver: bridge

volumes:
  setup:
    name: ${SETUP_VOLUME_NAME}
  elasticsearch:
    name: ${ELK_ELASTICSEARCH_VOLUME_NAME}
  postgres-main:
    name: ${POSTGRES_MAIN_VOLUME_NAME}
  postgres-replica:
    name: ${POSTGRES_REPLICA_VOLUME_NAME}
  redis:
    name: ${REDIS_VOLUME_NAME}
  minio:
    name: ${MINIO_VOLUME_NAME}